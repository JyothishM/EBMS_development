/* EBMS_serverClass.h
   Generated by wsdl2h 2.8.12 from http://localhost:8080/EBMS_server/services/EBMS_serverClass?wsdl and typemap.dat
   2013-01-21 18:12:04 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2012 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Usage Notes

NOTE:

 - Run soapcpp2 on EBMS_serverClass.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Use wsdl2h option -b to auto-generate bi-directional operations (duplex ops).
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://server.ebms                                                       *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

		Please Type your service description here
	
*/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to remove STL dependency)
#import "stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://server.ebms"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://server.ebms"
//gsoap ns1   schema namespace:	http://server.ebms
//gsoap ns1   schema form:	qualified

#define SOAP_NAMESPACE_OF_ns1	"http://server.ebms"
//gsoap ns1   schema namespace:	http://server.ebms
//gsoap ns1   schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _ns1__login.
class _ns1__login;

//  Forward declaration of class _ns1__loginResponse.
class _ns1__loginResponse;

//  Forward declaration of class _ns1__hasPrivilege.
class _ns1__hasPrivilege;

//  Forward declaration of class _ns1__hasPrivilegeResponse.
class _ns1__hasPrivilegeResponse;

//  Forward declaration of class _ns1__doOperation.
class _ns1__doOperation;

//  Forward declaration of class _ns1__doOperationResponse.
class _ns1__doOperationResponse;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://server.ebms                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://server.ebms                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://server.ebms                                                       *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://server.ebms":login

/// "http://server.ebms":login is a complexType.
/// class _ns1__login operations:
/// - soap_new__ns1__login(soap*) allocate
/// - soap_new__ns1__login(soap*, int num) allocate array
/// - soap_new_req__ns1__login(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__login(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__login(soap*, _ns1__login*) deserialize from a stream
/// - int soap_write__ns1__login(soap, _ns1__login*) serialize to a stream
class _ns1__login
{ public:
/// Element user of type xs:string.
    std::string*                         user                           0;	///< Nillable pointer.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://server.ebms":loginResponse

/// "http://server.ebms":loginResponse is a complexType.
/// class _ns1__loginResponse operations:
/// - soap_new__ns1__loginResponse(soap*) allocate
/// - soap_new__ns1__loginResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__loginResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__loginResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__loginResponse(soap*, _ns1__loginResponse*) deserialize from a stream
/// - int soap_write__ns1__loginResponse(soap, _ns1__loginResponse*) serialize to a stream
class _ns1__loginResponse
{ public:
/// Element return of type xs:boolean.
    bool*                                return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://server.ebms":hasPrivilege

/// "http://server.ebms":hasPrivilege is a complexType.
/// class _ns1__hasPrivilege operations:
/// - soap_new__ns1__hasPrivilege(soap*) allocate
/// - soap_new__ns1__hasPrivilege(soap*, int num) allocate array
/// - soap_new_req__ns1__hasPrivilege(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__hasPrivilege(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__hasPrivilege(soap*, _ns1__hasPrivilege*) deserialize from a stream
/// - int soap_write__ns1__hasPrivilege(soap, _ns1__hasPrivilege*) serialize to a stream
class _ns1__hasPrivilege
{ public:
/// Element user of type xs:string.
    std::string*                         user                           0;	///< Nillable pointer.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Nillable pointer.
/// Element level of type xs:string.
    std::string*                         level                          0;	///< Nillable pointer.
/// Element oper of type xs:string.
    std::string*                         oper                           0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://server.ebms":hasPrivilegeResponse

/// "http://server.ebms":hasPrivilegeResponse is a complexType.
/// class _ns1__hasPrivilegeResponse operations:
/// - soap_new__ns1__hasPrivilegeResponse(soap*) allocate
/// - soap_new__ns1__hasPrivilegeResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__hasPrivilegeResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__hasPrivilegeResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__hasPrivilegeResponse(soap*, _ns1__hasPrivilegeResponse*) deserialize from a stream
/// - int soap_write__ns1__hasPrivilegeResponse(soap, _ns1__hasPrivilegeResponse*) serialize to a stream
class _ns1__hasPrivilegeResponse
{ public:
/// Element return of type xs:boolean.
    bool*                                return_                        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://server.ebms":doOperation

/// "http://server.ebms":doOperation is a complexType.
/// class _ns1__doOperation operations:
/// - soap_new__ns1__doOperation(soap*) allocate
/// - soap_new__ns1__doOperation(soap*, int num) allocate array
/// - soap_new_req__ns1__doOperation(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__doOperation(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__doOperation(soap*, _ns1__doOperation*) deserialize from a stream
/// - int soap_write__ns1__doOperation(soap, _ns1__doOperation*) serialize to a stream
class _ns1__doOperation
{ public:
/// Element user of type xs:string.
    std::string*                         user                           0;	///< Nillable pointer.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Nillable pointer.
/// Element level of type xs:string.
    std::string*                         level                          0;	///< Nillable pointer.
/// Element oper of type xs:string.
    std::string*                         oper                           0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://server.ebms":doOperationResponse

/// "http://server.ebms":doOperationResponse is a complexType.
/// class _ns1__doOperationResponse operations:
/// - soap_new__ns1__doOperationResponse(soap*) allocate
/// - soap_new__ns1__doOperationResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__doOperationResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__doOperationResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__doOperationResponse(soap*, _ns1__doOperationResponse*) deserialize from a stream
/// - int soap_write__ns1__doOperationResponse(soap, _ns1__doOperationResponse*) serialize to a stream
class _ns1__doOperationResponse
{ public:
/// Element return of type xs:string.
    std::string*                         return_                        0;	///< Nillable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://server.ebms                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://server.ebms                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://server.ebms                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://server.ebms                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://server.ebms                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	EBMS_USCOREserverClassSoap11Binding 
//gsoap ns1  service type:	EBMS_USCOREserverClassPortType 
//gsoap ns1  service port:	http://localhost:8080/EBMS_server/services/EBMS_serverClass.EBMS_serverClassHttpSoap11Endpoint/ 
//gsoap ns1  service port:	http://localhost:8080/EBMS_server/services/EBMS_serverClass.EBMS_serverClassHttpSoap12Endpoint/ 
//gsoap ns1  service namespace:	http://server.ebms 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
		Please Type your service description here
	

@section Service_bindings Service Bindings

  - @ref EBMS_USCOREserverClassSoap11Binding

@section Service_more More Information

  - @ref page_notes "Usage Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page EBMS_USCOREserverClassSoap11Binding Binding "EBMS_USCOREserverClassSoap11Binding"

@section EBMS_USCOREserverClassSoap11Binding_operations Operations of Binding  "EBMS_USCOREserverClassSoap11Binding"

  - @ref __ns1__doOperation

  - @ref __ns1__login

  - @ref __ns1__hasPrivilege

  - @ref __ns1__doOperation_

  - @ref __ns1__login_

  - @ref __ns1__hasPrivilege_

@section EBMS_USCOREserverClassSoap11Binding_ports Endpoints of Binding  "EBMS_USCOREserverClassSoap11Binding"

  - http://localhost:8080/EBMS_server/services/EBMS_serverClass.EBMS_serverClassHttpSoap11Endpoint/

  - http://localhost:8080/EBMS_server/services/EBMS_serverClass.EBMS_serverClassHttpSoap12Endpoint/

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   EBMS_USCOREserverClassSoap11Binding                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__doOperation                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__doOperation" of service binding "EBMS_USCOREserverClassSoap11Binding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "urn:doOperation"

  - Addressing input action: "http://server.ebms/EBMS_serverClassPortType/doOperation"

  - Addressing input output action: "http://server.ebms/EBMS_serverClassPortType/doOperationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__doOperation(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__doOperation*                  ns1__doOperation,
    // output parameters:
    _ns1__doOperationResponse*          ns1__doOperationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__doOperation(
    struct soap *soap,
    // input parameters:
    _ns1__doOperation*                  ns1__doOperation,
    // output parameters:
    _ns1__doOperationResponse*          ns1__doOperationResponse
  );
@endcode

C++ proxy class (defined in soapEBMS_USCOREserverClassSoap11BindingProxy.h):
@code
  class EBMS_USCOREserverClassSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapEBMS_USCOREserverClassSoap11BindingService.h):
@code
  class EBMS_USCOREserverClassSoap11BindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	doOperation SOAP
//gsoap ns1  service method-style:	doOperation document
//gsoap ns1  service method-encoding:	doOperation literal
//gsoap ns1  service method-action:	doOperation urn:doOperation
//gsoap ns1  service method-output-action:	doOperation http://server.ebms/EBMS_serverClassPortType/doOperationResponse
int __ns1__doOperation(
    _ns1__doOperation*                  ns1__doOperation,	///< Input parameter
    _ns1__doOperationResponse*          ns1__doOperationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__login                                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__login" of service binding "EBMS_USCOREserverClassSoap11Binding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "urn:login"

  - Addressing input action: "http://server.ebms/EBMS_serverClassPortType/login"

  - Addressing input output action: "http://server.ebms/EBMS_serverClassPortType/loginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__login(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__login*                        ns1__login,
    // output parameters:
    _ns1__loginResponse*                ns1__loginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__login(
    struct soap *soap,
    // input parameters:
    _ns1__login*                        ns1__login,
    // output parameters:
    _ns1__loginResponse*                ns1__loginResponse
  );
@endcode

C++ proxy class (defined in soapEBMS_USCOREserverClassSoap11BindingProxy.h):
@code
  class EBMS_USCOREserverClassSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapEBMS_USCOREserverClassSoap11BindingService.h):
@code
  class EBMS_USCOREserverClassSoap11BindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	login SOAP
//gsoap ns1  service method-style:	login document
//gsoap ns1  service method-encoding:	login literal
//gsoap ns1  service method-action:	login urn:login
//gsoap ns1  service method-output-action:	login http://server.ebms/EBMS_serverClassPortType/loginResponse
int __ns1__login(
    _ns1__login*                        ns1__login,	///< Input parameter
    _ns1__loginResponse*                ns1__loginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__hasPrivilege                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__hasPrivilege" of service binding "EBMS_USCOREserverClassSoap11Binding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "urn:hasPrivilege"

  - Addressing input action: "http://server.ebms/EBMS_serverClassPortType/hasPrivilege"

  - Addressing input output action: "http://server.ebms/EBMS_serverClassPortType/hasPrivilegeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__hasPrivilege(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__hasPrivilege*                 ns1__hasPrivilege,
    // output parameters:
    _ns1__hasPrivilegeResponse*         ns1__hasPrivilegeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__hasPrivilege(
    struct soap *soap,
    // input parameters:
    _ns1__hasPrivilege*                 ns1__hasPrivilege,
    // output parameters:
    _ns1__hasPrivilegeResponse*         ns1__hasPrivilegeResponse
  );
@endcode

C++ proxy class (defined in soapEBMS_USCOREserverClassSoap11BindingProxy.h):
@code
  class EBMS_USCOREserverClassSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapEBMS_USCOREserverClassSoap11BindingService.h):
@code
  class EBMS_USCOREserverClassSoap11BindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	hasPrivilege SOAP
//gsoap ns1  service method-style:	hasPrivilege document
//gsoap ns1  service method-encoding:	hasPrivilege literal
//gsoap ns1  service method-action:	hasPrivilege urn:hasPrivilege
//gsoap ns1  service method-output-action:	hasPrivilege http://server.ebms/EBMS_serverClassPortType/hasPrivilegeResponse
int __ns1__hasPrivilege(
    _ns1__hasPrivilege*                 ns1__hasPrivilege,	///< Input parameter
    _ns1__hasPrivilegeResponse*         ns1__hasPrivilegeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__doOperation_                                                      *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__doOperation_" of service binding "EBMS_USCOREserverClassSoap11Binding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "urn:doOperation"

  - Addressing input action: "http://server.ebms/EBMS_serverClassPortType/doOperation"

  - Addressing input output action: "http://server.ebms/EBMS_serverClassPortType/doOperationResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__doOperation_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__doOperation*                  ns1__doOperation,
    // output parameters:
    _ns1__doOperationResponse*          ns1__doOperationResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__doOperation_(
    struct soap *soap,
    // input parameters:
    _ns1__doOperation*                  ns1__doOperation,
    // output parameters:
    _ns1__doOperationResponse*          ns1__doOperationResponse
  );
@endcode

C++ proxy class (defined in soapEBMS_USCOREserverClassSoap11BindingProxy.h):
@code
  class EBMS_USCOREserverClassSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapEBMS_USCOREserverClassSoap11BindingService.h):
@code
  class EBMS_USCOREserverClassSoap11BindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	doOperation_ SOAP
//gsoap ns1  service method-style:	doOperation_ document
//gsoap ns1  service method-encoding:	doOperation_ literal
//gsoap ns1  service method-action:	doOperation_ urn:doOperation
//gsoap ns1  service method-output-action:	doOperation_ http://server.ebms/EBMS_serverClassPortType/doOperationResponse
int __ns1__doOperation_(
    _ns1__doOperation*                  ns1__doOperation,	///< Input parameter
    _ns1__doOperationResponse*          ns1__doOperationResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__login_                                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__login_" of service binding "EBMS_USCOREserverClassSoap11Binding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "urn:login"

  - Addressing input action: "http://server.ebms/EBMS_serverClassPortType/login"

  - Addressing input output action: "http://server.ebms/EBMS_serverClassPortType/loginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__login_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__login*                        ns1__login,
    // output parameters:
    _ns1__loginResponse*                ns1__loginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__login_(
    struct soap *soap,
    // input parameters:
    _ns1__login*                        ns1__login,
    // output parameters:
    _ns1__loginResponse*                ns1__loginResponse
  );
@endcode

C++ proxy class (defined in soapEBMS_USCOREserverClassSoap11BindingProxy.h):
@code
  class EBMS_USCOREserverClassSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapEBMS_USCOREserverClassSoap11BindingService.h):
@code
  class EBMS_USCOREserverClassSoap11BindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	login_ SOAP
//gsoap ns1  service method-style:	login_ document
//gsoap ns1  service method-encoding:	login_ literal
//gsoap ns1  service method-action:	login_ urn:login
//gsoap ns1  service method-output-action:	login_ http://server.ebms/EBMS_serverClassPortType/loginResponse
int __ns1__login_(
    _ns1__login*                        ns1__login,	///< Input parameter
    _ns1__loginResponse*                ns1__loginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__hasPrivilege_                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__hasPrivilege_" of service binding "EBMS_USCOREserverClassSoap11Binding"

/**

Operation details:

  - SOAP document/literal style messaging

  - Action: "urn:hasPrivilege"

  - Addressing input action: "http://server.ebms/EBMS_serverClassPortType/hasPrivilege"

  - Addressing input output action: "http://server.ebms/EBMS_serverClassPortType/hasPrivilegeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__hasPrivilege_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__hasPrivilege*                 ns1__hasPrivilege,
    // output parameters:
    _ns1__hasPrivilegeResponse*         ns1__hasPrivilegeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__hasPrivilege_(
    struct soap *soap,
    // input parameters:
    _ns1__hasPrivilege*                 ns1__hasPrivilege,
    // output parameters:
    _ns1__hasPrivilegeResponse*         ns1__hasPrivilegeResponse
  );
@endcode

C++ proxy class (defined in soapEBMS_USCOREserverClassSoap11BindingProxy.h):
@code
  class EBMS_USCOREserverClassSoap11BindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapEBMS_USCOREserverClassSoap11BindingService.h):
@code
  class EBMS_USCOREserverClassSoap11BindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	hasPrivilege_ SOAP
//gsoap ns1  service method-style:	hasPrivilege_ document
//gsoap ns1  service method-encoding:	hasPrivilege_ literal
//gsoap ns1  service method-action:	hasPrivilege_ urn:hasPrivilege
//gsoap ns1  service method-output-action:	hasPrivilege_ http://server.ebms/EBMS_serverClassPortType/hasPrivilegeResponse
int __ns1__hasPrivilege_(
    _ns1__hasPrivilege*                 ns1__hasPrivilege,	///< Input parameter
    _ns1__hasPrivilegeResponse*         ns1__hasPrivilegeResponse	///< Output parameter
);

/**

@page EBMS_USCOREserverClassSoap11Binding Binding "EBMS_USCOREserverClassSoap11Binding"

@section EBMS_USCOREserverClassSoap11Binding_policy_enablers Policy Enablers of Binding  "EBMS_USCOREserverClassSoap11Binding"

Based on policies, this service imports

  - WS-Policy reminders and enablers:
    - WS-Addressing 1.0 (2005/08, accepts 2004/08):
	@code
	#import "wsa5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-Addressing (2004/08):
	@code
	#import "wsa.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsaapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	// See the user guide gsoap/doc/wsa/html/index.html
	@endcode
    - WS-ReliableMessaging 1.0:
	@code
	#import "wsrm5.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-ReliableMessaging 1.1:
	@code
	#import "wsrm.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsrmapi.h"
	soap_register_plugin(soap, soap_wsa); // register the wsa plugin in your code
	soap_register_plugin(soap, soap_wsrm); // register the wsrm plugin in your code
	// See the user guide gsoap/doc/wsrm/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.0 (accepts 1.1):
	@code
	#import "wsse.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - WS-Security (SOAP Message Security) 1.1 (accepts 1.0):
	@code
	#import "wsse11.h" // to be added to this header file for the soapcpp2 build step
	@endcode
	@code
	#include "plugin/wsseapi.h"
	soap_register_plugin(soap, soap_wsse); // register the wsse plugin in your code
	// See the user guide gsoap/doc/wsse/html/index.html
	@endcode
    - HTTP Digest Authentication:
	@code
	#include "plugin/httpda.h"
	soap_register_plugin(soap, soap_http_da); // register the HTTP DA plugin in your code
	// See the user guide gsoap/doc/httpda/html/index.html
	@endcode
*/


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns1 Top-level root elements of schema "http://server.ebms"

  - <ns1:login> @ref _ns1__login
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__login(struct soap*, _ns1__login*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__login(struct soap*, _ns1__login*);
    @endcode

  - <ns1:loginResponse> @ref _ns1__loginResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__loginResponse(struct soap*, _ns1__loginResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__loginResponse(struct soap*, _ns1__loginResponse*);
    @endcode

  - <ns1:hasPrivilege> @ref _ns1__hasPrivilege
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__hasPrivilege(struct soap*, _ns1__hasPrivilege*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__hasPrivilege(struct soap*, _ns1__hasPrivilege*);
    @endcode

  - <ns1:hasPrivilegeResponse> @ref _ns1__hasPrivilegeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__hasPrivilegeResponse(struct soap*, _ns1__hasPrivilegeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__hasPrivilegeResponse(struct soap*, _ns1__hasPrivilegeResponse*);
    @endcode

  - <ns1:doOperation> @ref _ns1__doOperation
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__doOperation(struct soap*, _ns1__doOperation*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__doOperation(struct soap*, _ns1__doOperation*);
    @endcode

  - <ns1:doOperationResponse> @ref _ns1__doOperationResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__doOperationResponse(struct soap*, _ns1__doOperationResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__doOperationResponse(struct soap*, _ns1__doOperationResponse*);
    @endcode

@section ns1 Top-level root elements of schema "http://server.ebms"

*/

/* End of EBMS_serverClass.h */
