/* soapEBMS_USCOREserverClassSoap11BindingObject.h
   Generated by gSOAP 2.8.12 from EBMS_serverClass.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapEBMS_USCOREserverClassSoap11BindingObject_H
#define soapEBMS_USCOREserverClassSoap11BindingObject_H
#include "soapH.h"

/******************************************************************************\
 *                                                                            *
 * Service Object                                                             *
 *                                                                            *
\******************************************************************************/

class EBMS_USCOREserverClassSoap11BindingService : public soap
{    public:
	EBMS_USCOREserverClassSoap11BindingService()
	{ static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://server.ebms", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};

	this->namespaces = namespaces; };
	virtual ~EBMS_USCOREserverClassSoap11BindingService() { };
	/// Bind service to port (returns master socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET bind(const char *host, int port, int backlog) { return soap_bind(this, host, port, backlog); };
	/// Accept next request (returns socket or SOAP_INVALID_SOCKET)
	virtual	SOAP_SOCKET accept() { return soap_accept(this); };
#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
	/// Then accept SSL handshake, when SSL is used
	virtual	int ssl_accept() { return soap_ssl_accept(this); };
#endif
	/// Serve this request (returns error code or SOAP_OK)
	virtual	int serve() { return soap_serve(this); };
};

/******************************************************************************\
 *                                                                            *
 * Service Operations (you should define these globally)                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__doOperation(struct soap*, _ns1__doOperation *ns1__doOperation, _ns1__doOperationResponse *ns1__doOperationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__login(struct soap*, _ns1__login *ns1__login, _ns1__loginResponse *ns1__loginResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__hasPrivilege(struct soap*, _ns1__hasPrivilege *ns1__hasPrivilege, _ns1__hasPrivilegeResponse *ns1__hasPrivilegeResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__doOperation_(struct soap*, _ns1__doOperation *ns1__doOperation, _ns1__doOperationResponse *ns1__doOperationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__login_(struct soap*, _ns1__login *ns1__login, _ns1__loginResponse *ns1__loginResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__hasPrivilege_(struct soap*, _ns1__hasPrivilege *ns1__hasPrivilege, _ns1__hasPrivilegeResponse *ns1__hasPrivilegeResponse);

#endif
