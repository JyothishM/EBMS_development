package ebms.server.core.pkj;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;

public class EBMS_consts {

	public static String dbHost;
	public static String dbUsername;
	public static String dbPassWord;
	public static String dbDrivername;

	public static String fieldVal_any;
	public static int traceLevel;
	// tables
	
	public static class TblUserLogin {
		public static String tablename;
		public static String fieldUserId;
		public static String fieldUsername;
		public static String fieldPassword;
		public static String fieldState;
		public static String fieldUserType;
		public static String fieldState_rqdValue;
	}
	
	public static class TblSystemHierarchy {
		public static String tablename;
		public static String fieldSystemId;
		public static String fieldSystemname;
		public static String fieldParentId;
		public static String fieldSystemType;
	}
	
	
	public static class TblPrevilageTable {
		public static String tablename;
		public static String fieldUserId;
		public static String fieldSystemId;
		public static String fieldOperation;
		public static String fieldStatus;
		public static String fieldStatus_rqdValue;
	}
	
	public static class TblOperations {
		public static String tablename;
		public static String fieldOp_name;
		public static String fieldOp_type;
	}
	
	public static boolean initConsts(String configfile) {
		boolean succes=false;
		try {
				Properties prop = new Properties();
				prop.load(new FileInputStream(configfile));
				succes = initConstsInternal(prop);
			} catch (FileNotFoundException e) {
			succes = false; 
			e.printStackTrace();
		} catch (IOException e) {
			succes = false; 
			e.printStackTrace();
		}
		return succes;
	}
	
	private static boolean initConstsInternal(Properties prop){
		boolean bSucces=false;
		dbHost = prop.getProperty("host").toString();
		dbUsername = prop.getProperty("username").toString();
		dbPassWord = prop.getProperty("password").toString();
		dbDrivername = prop.getProperty("driver").toString();
		fieldVal_any = "any";
		traceLevel = Integer.parseInt( prop.getProperty("tracelevel").toString().trim() );
		
		// user login table
		TblUserLogin.tablename = prop.getProperty("dbTblUserlogin").toString();
		TblUserLogin.fieldUserId = "id";
		TblUserLogin.fieldUsername = "username";
		TblUserLogin.fieldPassword = "password";
		TblUserLogin.fieldState = "state";
		TblUserLogin.fieldUserType = "usertype";
		TblUserLogin.fieldState_rqdValue = "active";
		
		// system hierarchy table
		TblSystemHierarchy.tablename = prop.getProperty("dbTblSystemHierarchy").toString();
		TblSystemHierarchy.fieldSystemId = "systemid";
		TblSystemHierarchy.fieldSystemname = "systemname";
		TblSystemHierarchy.fieldParentId = "parentid";
		TblSystemHierarchy.fieldSystemType = "sytemtype";
		
		// previlagetable
		TblPrevilageTable.tablename = prop.getProperty("dbTblPrevilageTable").toString();
		TblPrevilageTable.fieldUserId = "userid";
		TblPrevilageTable.fieldSystemId = "systemid";
		TblPrevilageTable.fieldOperation = "operation";
		TblPrevilageTable.fieldStatus = "status";
		TblPrevilageTable.fieldStatus_rqdValue = "enabled";
		
		// operations table
		TblOperations.tablename = prop.getProperty("dbTblOperations").toString();
		TblOperations.fieldOp_name = "op_name";
		TblOperations.fieldOp_type = "op_type";
		bSucces = true;
		return bSucces;
	}
	

}
