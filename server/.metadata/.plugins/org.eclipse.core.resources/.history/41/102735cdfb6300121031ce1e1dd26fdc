package ebms.server.core.pkj;

import ebms.server.core.interfaces.ServerInterface;
import ebms.server.core.impl.Connector;
import ebms.server.core.interfaces.EBMSConnectorInterface;
import ebms.server.core.pkj.EBMS_consts;
import ebms.server.core.pkj.EBMS_consts.TblPrevilageTable;
import ebms.server.core.pkj.EBMS_consts.TblUserLogin;


import java.io.File;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.SQLException;


public class Server implements ServerInterface {
	
	public Server(String configfile) {
		boolean bConstinit = EBMS_consts.initConsts(configfile);
		if(traceState())
			System.out.println( "Constinit :" + bConstinit );
		initServer();
	}
	
	public Server(InputStream stream) {
		boolean bConstinit = EBMS_consts.initConsts(stream);
		if(traceState())
			System.out.println( "Constinit :" + bConstinit );
		initServer();
	}
	
	@Override
	public void setTraceLevel(int trace){
		mTraceLevel = trace;
	}

	@Override
	public String doOperation(String user,String password,String level,String oper) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean hasPrivilege(String user,String password,String level,String oper) {
		boolean bHasPrivilage=false;
		if(login(user,password))
		{
			String state = checkPrivilage_AllOptions(user,level,oper);
			//System.out.println( "state :" + state + "," + EBMS_consts.TblPrevilageTable.fieldStatus_rqdValue );
			bHasPrivilage = (state.equals(EBMS_consts.TblPrevilageTable.fieldStatus_rqdValue));
		}
		return bHasPrivilage;
	}

	@Override
	public boolean login(String user, String password) {
		
		boolean bLogin = false;
		String loginquery = String.format("%s='%s' or %s='%s' and %s='%s' and %s='%s'",
				EBMS_consts.TblUserLogin.fieldUserId, user,
				EBMS_consts.TblUserLogin.fieldUsername, user,
				EBMS_consts.TblUserLogin.fieldPassword, password,
				EBMS_consts.TblUserLogin.fieldState, EBMS_consts.TblUserLogin.fieldState_rqdValue);
		
		int count = findCount(EBMS_consts.TblUserLogin.tablename,loginquery);
		bLogin = (count==1);
		return bLogin;
	}
	
	protected   EBMSConnectorInterface createConnector() {
		EBMSConnectorInterface conn = new Connector();
		return conn;
	}
	
	private int findCount(String tablename,String query) {
		int count = 0;
		try
		{
			boolean bOpened = mConnector.openDb();
			//System.out.println( "Connecting :" + bOpened );
			if(bOpened)
			{
				query = String.format("select * from %s where %s",
						tablename,
						query);
				if(traceState())
					System.out.println( "query :" + query );
				ResultSet result = mConnector.execute(query);
				
				// finding the result count        
				while(result.next())
				{
					count++;
				}	
				mConnector.closeDb();	
			}
		}catch(SQLException ex)
		{
			System.out.println( "SQLException :" + ex.getMessage() );
		}
		return count;
	}

	private boolean tableContains(String tablename,String query) {
		boolean bContains=false;
		try
		{
			boolean bOpened = mConnector.openDb();
			//System.out.println( "Connecting :" + bOpened );
			if(bOpened)
			{
				query = String.format("select * from %s where %s",
						tablename,
						query);
				if(traceState())
					System.out.println( "query :" + query );
				ResultSet result = mConnector.execute(query);
				
				// finding the result count        
				if(result.next())
				{
					bContains = true;
				}	
				mConnector.closeDb();	
			}
		}catch(SQLException ex)
		{
			System.out.println( "SQLException :" + ex.getMessage() );
		}
		return bContains;
	}
	
	private String readString(String tablename,String field,String query) {
		String valStr = null;
		try
		{
			boolean bOpened = mConnector.openDb();
			//System.out.println( "Connecting :" + bOpened );
			if(bOpened)
			{
				query = String.format("select %s from %s where %s",
						field,
						tablename,
						query);
				if(traceState())
					System.out.println( "query :" + query );
				ResultSet result = mConnector.execute(query);
				if(result.next())
				{
					valStr = result.getString(field);
				}
				mConnector.closeDb();	
			}
		}catch(SQLException ex)
		{
			System.out.println( "SQLException :" + ex.getMessage() );
		}
		return valStr;
	}
	
	private String checkPrivilage(String userid,String systemid,String oper){
		if(traceState())
			System.out.println(String.format("checkPrivilage :userid =%s systemid=%s oper=%s",userid,systemid,oper));
		String status=null;
		String query = String.format("%s='%s' and %s='%s' and %s='%s'",
				EBMS_consts.TblPrevilageTable.fieldUserId,userid,
				EBMS_consts.TblPrevilageTable.fieldSystemId,systemid,
				EBMS_consts.TblPrevilageTable.fieldOperation,oper);
		status = readString(EBMS_consts.TblPrevilageTable.tablename,
				EBMS_consts.TblPrevilageTable.fieldStatus,
				query);
		return status;
	}
	
	private String checkPrivilageForOperation(String userid,String systemid,String oper) {
		String status=checkPrivilage(userid,systemid,oper);
		if(status == null)
		{
			String opType = readString(EBMS_consts.TblOperations.tablename,
					EBMS_consts.TblOperations.fieldOp_type,
					String.format("%s='%s'", EBMS_consts.TblOperations.fieldOp_name,oper));
			if(opType != null)
			{
				status=checkPrivilage(userid,systemid,opType);
			}
		}
		
		if(status==null)       // checking for 'any' clause
		{
			status=checkPrivilage(userid,systemid,EBMS_consts.fieldVal_any);
		}
		
		return status;
	}
	
	private String checkPrivilageForSystemAndOper(String userid,String systemid,String oper){
		String status=checkPrivilageForOperation(userid,systemid,oper);
		if(status==null)
		{
			String sysType = readString(EBMS_consts.TblSystemHierarchy.tablename,
					EBMS_consts.TblSystemHierarchy.fieldSystemType,
					String.format("%s='%s'", EBMS_consts.TblSystemHierarchy.fieldSystemId,systemid));
			if(sysType != null)
			{
				status=checkPrivilageForOperation(userid,sysType,oper);
			}
		}	
		if(status==null)       // checking for 'any' clause
		{
			status=checkPrivilageForOperation(userid,EBMS_consts.fieldVal_any,oper);
		}
		
		return status;
	}
	
	private String checkPrivilage_AllOptions(String userid,String systemid,String oper){
		String status=checkPrivilageForSystemAndOper(userid,systemid,oper);
		if(status==null)
		{
			String userType = readString(EBMS_consts.TblUserLogin.tablename,
					EBMS_consts.TblUserLogin.fieldUserType,
					String.format("%s='%s'", EBMS_consts.TblUserLogin.fieldUserId,userid));
			if(userType!=null)
			{
				status=checkPrivilageForSystemAndOper(userType,systemid,oper);
			}
		}
		if(status==null)       // checking for 'any' clause
		{
			status=checkPrivilageForOperation(EBMS_consts.fieldVal_any,systemid,oper);
		}	
		if(status == null)     // checking if username is given instead.
		{
			String ActualId = readString(EBMS_consts.TblUserLogin.tablename,
					EBMS_consts.TblUserLogin.fieldUserId,
					String.format("%s='%s'",EBMS_consts.TblUserLogin.fieldUsername,userid));
			if(ActualId != null)
			{
				if(traceState())
					System.out.println(String.format("checkPrivilage_AllOptions :ActualId =%s systemid=%s oper=%s",ActualId,systemid,oper));
				status = checkPrivilage_AllOptions(ActualId,systemid,oper);
			}
		}
		return status;
	}
	
	private boolean traceState(){
		return mTraceLevel>=2;
	}
	
	private void initServer() {
		mConnector = createConnector();
		mConnector.setTraceLevel(EBMS_consts.traceLevel);
		setTraceLevel(EBMS_consts.traceLevel);
	}
	
	private EBMSConnectorInterface mConnector;
	private int mTraceLevel=1;

}
